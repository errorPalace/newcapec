package net.newcapec.campus.h5.action;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.regex.Pattern;

import net.newcapec.campus.h5.entity.VoteClass;
import net.newcapec.campus.h5.entity.VoteSchool;
import net.newcapec.campus.h5.entity.VoteUserInfo;
import net.newcapec.campus.h5.http.HttpCampusUtils;
import net.newcapec.campus.h5.manager.VoteClassManager;
import net.newcapec.campus.h5.manager.VoteSchoolManager;
import net.newcapec.campus.h5.manager.VoteUserInfoManager;
import net.newcapec.campus.h5.util.DateUtil;
import net.newcapec.campus.quickaccess.utils.PreferenceUtils;
import net.newcapec.v3.core.web.action.AbstractSimpleGridBaseAction;
import net.newcapec.v3.extend.orm.Condition;
import net.newcapec.v3.extend.orm.condition.Conditions;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.opensymphony.xwork2.ActionContext;

public class VoteAction extends AbstractSimpleGridBaseAction<VoteClass> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private HttpCampusUtils httpCampusUtils;
	private PreferenceUtils preferenceUtils;
	private VoteUserInfoManager voteUserInfoManager;
	private VoteClassManager voteClassManager;
	private VoteSchoolManager voteSchoolManager;
	/**
	 * 代表上传文件的对象
	 */
	private File file;

	/**
	 * 上传文件的名称,上传文件名命名规则为***FileName; ***为jsp中file控件的命名
	 */
	private String fileFileName;

	/**
	 * 长传文件的MIME类型，为***ContentType；file为file控件的名称
	 */
	private String fileContentType;

	public File getFile() {
		return file;
	}

	public void setFile(File file) {
		this.file = file;
	}

	public String getFileFileName() {
		return fileFileName;
	}

	public void setFileFileName(String fileFileName) {
		this.fileFileName = fileFileName;
	}

	public String getFileContentType() {
		return fileContentType;
	}

	public void setFileContentType(String fileContentType) {
		this.fileContentType = fileContentType;
	}

	public void setVoteSchoolManager(VoteSchoolManager voteSchoolManager) {
		this.voteSchoolManager = voteSchoolManager;
	}

	public VoteClassManager getVoteClassManager() {
		return voteClassManager;
	}

	public void setVoteClassManager(VoteClassManager voteClassManager) {
		this.voteClassManager = voteClassManager;
	}

	public void setVoteUserInfoManager(VoteUserInfoManager voteUserInfoManager) {
		this.voteUserInfoManager = voteUserInfoManager;
	}

	public void setPreferenceUtils(PreferenceUtils preferenceUtils) {
		this.preferenceUtils = preferenceUtils;
	}

	public void setHttpCampusUtils(HttpCampusUtils httpCampusUtils) {
		this.httpCampusUtils = httpCampusUtils;
	}

	// 入口
	public void entrance() throws Exception {
		String token = this.getParameter("token");
		if (StringUtils.isBlank(token)) {
			this.log.info("############################### token为空");
			return;
		}
		JSONObject jsonObject = httpCampusUtils.getUserByTokenSys(token);
		this.log.info("###############################" + jsonObject);
		if (jsonObject == null) {
			this.log.info("############################### token没有获取用户信息失败");
			this.getResponse().sendRedirect(preferenceUtils.getErrorTokenURL());
			return;
		}

		String sex = jsonObject.getString("sex");
		Long userId = jsonObject.getLong("userId");
		String name = jsonObject.getString("name");
		String nickname = jsonObject.getString("nickname");
		String customerCode = jsonObject.getString("customerCode");
		String customerName = jsonObject.getString("customerName");
		boolean bindEcard = jsonObject.getBooleanValue("bindEcard");
		if (!bindEcard) {
			this.log.info("############################### token没有获取用户信息没有绑卡   查看微信问题（进这口必须绑卡的）");
			this.getResponse().sendRedirect(preferenceUtils.getErrorTokenURL());
			return;
		}

		String regex = "^[\\p{L} .'-]+$";
		boolean isName = Pattern.matches(regex, name);
		if (!isName) {
			name = nickname;
		}
		// 先查询本地是否有用户信息
		List<VoteUserInfo> vuiList = voteUserInfoManager
				.findByCondition(Conditions.eq("userId", userId));
		if (vuiList.isEmpty()) {
			VoteUserInfo vui = new VoteUserInfo();
			vui.setCreateDate(new Date());
			vui.setUserName(name);
			vui.setCustomerCode(customerCode);
			vui.setCustomerName(customerName);
			String uuid = UUID.randomUUID().toString().trim()
					.replaceAll("-", "");// uuid
			vui.setUuid(uuid);
			vui.setUserId(userId);
			vui.setType(false);//
			VoteUserInfo voteUserInfo = voteUserInfoManager.save(vui);

			if (voteUserInfo != null) {
				this.getResponse().sendRedirect(
						preferenceUtils.getVoteRedirectURL() + "?key="
								+ voteUserInfo.getUuid());
			} else {
				this.getResponse().sendRedirect(
						preferenceUtils.getErrorTokenURL());
			}
		} else {
			this.getResponse().sendRedirect(
					preferenceUtils.getVoteRedirectURL() + "?key="
							+ vuiList.get(0).getUuid());
		}
	}

	// 获取用户信息
	public void getUserInfo() throws Exception {
		JSONObject result = new JSONObject();
		JSONObject data = new JSONObject();
		String uuid = this.getParameter("key");
		List<VoteUserInfo> voteUserInfoList = voteUserInfoManager
				.findByCondition(Conditions.or(Conditions.eq("uuid", uuid),
						Conditions.eq("shareUuid", uuid)));
		if (voteUserInfoList.isEmpty()) {
			result.put("result_", false);
			result.put("code_", 99);
			result.put("message_", "没有找到该用户的信息！");
			ajaxOutPutText(result.toJSONString());
			return;
		}
		VoteUserInfo voteUserInfo = voteUserInfoList.get(0);
		boolean userVote = voteUserInfo.isType();
		boolean schoolType = true;
		String customerCode = voteUserInfo.getCustomerCode();

		List<VoteClass> voteClassList = voteClassManager.findByCondition(
				Conditions.eq("customerCode", customerCode),
				Conditions.desc("poll"));
		if (voteClassList.isEmpty()) {
			schoolType = false;
		}

		data.put("userCustomerCode", voteUserInfo.getCustomerCode());
		data.put("userVote", userVote);
		data.put("schoolType", schoolType);
		data.put("customerName", voteUserInfo.getCustomerName());
		if (schoolType) {
			data.put("userCustomerName", voteUserInfo.getCustomerName());
			JSONArray classList = new JSONArray();
			long sum = 0L;
			long yesterdaySum = 0L;
			for (VoteClass vc : voteClassList) {
				JSONObject jo = new JSONObject();
				jo.put("classId", vc.getId());
				jo.put("className", vc.getClassName().trim());
				jo.put("poll", vc.getPoll());
				sum = sum + vc.getPoll();
				classList.add(jo);
			}
			// int todayCount =
			// voteUserInfoManager.countByCondition(Conditions.eq("classId",
			// voteUserInfo));
			// int yesterdayCount =
			// voteUserInfoManager.countByCondition(Conditions.eq("classId",
			// vc.getId()),Conditions.lt("voteDate", DateUtil.getStartTime()));

			// sum = sum + todayCount;
			// yesterdaySum = yesterdaySum + yesterdayCount;
			data.put("toDayMoney", sum * 0.5);
			// data.put("yesterdayAdd", (sum - yesterdaySum) * 0.5);
			data.put("yesterdayAdd", 0);
			data.put("classList", classList);
			if (userVote) {
				VoteClass myClass = voteClassManager.get(voteUserInfo
						.getClassId());
				if (voteClassList.size() > 5) {
					VoteClass voteClass = voteClassList.get(4);
					long poll5 = voteClass.getPoll();// 第五名的票数

					long myClassPoll = myClass.getPoll();
					long differ5 = poll5 - myClassPoll;
					if (differ5 > 0) {
						data.put("myClassMessage", "距离获得奖金还有" + differ5 + "票");
					} else {
						data.put("myClassMessage", "已进入前5名，继续保持哦");
					}
				} else {
					data.put("myClassMessage", "已进入前5名，继续保持哦");
				}
				data.put("myClassId", voteUserInfo.getClassId());
				data.put("myClassName", myClass.getClassName());
				data.put("myClassPoll", myClass.getPoll());
				data.put("myCustomerCode", myClass.getCustomerCode());
			}

		} else { // 自己学校没有参数
			List<VoteSchool> schoolAll = voteSchoolManager
					.findByCondition(Conditions.desc("poll"));
			JSONArray JA = new JSONArray();

			for (VoteSchool vs : schoolAll) {
				JSONObject JO = new JSONObject();
				String customerCode1 = vs.getCustomerCode();
				String customerName = vs.getCustomerName();
				long poll = vs.getPoll();
				JO.put("customerCode", customerCode1);
				JO.put("customerName", customerName.trim());
				JO.put("poll", poll);
				JO.put("sunMoney", poll * 0.5);
				int countClass = voteClassManager.countByCondition(Conditions
						.eq("customerCode", vs.getCustomerCode()));
				JO.put("countClass", countClass);

				if (userVote) {
					String customerCode2 = voteClassManager.get(
							voteUserInfo.getClassId()).getCustomerCode();
					if (customerCode2.equals(customerCode1)) {
						JO.put("voteSchool", true);
					} else {
						JO.put("voteSchool", false);
					}

				} else {
					JO.put("voteSchool", false);
				}
				JA.add(JO);
			}
			data.put("schoolList", JA);

		}

		result.put("result_", true);
		result.put("code_", 0);
		result.put("data", data);
		result.put("message_", "成功");
		ajaxOutPutText(result.toJSONString());
		return;

	}

	// 获取全国列表
	public void getAllSchool() throws Exception {
		JSONObject result = new JSONObject();
		JSONObject data = new JSONObject();
		String uuid = this.getParameter("key");
		List<VoteUserInfo> voteUserInfoList = voteUserInfoManager
				.findByCondition(Conditions.eq("uuid", uuid));
		if (voteUserInfoList.isEmpty()) {
			result.put("result_", false);
			result.put("code_", 99);
			result.put("message_", "没有找到该用户的信息！");
			ajaxOutPutText(result.toJSONString());
			return;
		}
		VoteUserInfo voteUserInfo = voteUserInfoList.get(0);
		boolean userVote = voteUserInfo.isType();
		String customerCode = voteUserInfo.getCustomerCode();
		boolean schoolType = true;

		List<VoteSchool> voteSchoolList = voteSchoolManager
				.findByCondition(Conditions.eq("customerCode", customerCode));
		if (voteSchoolList.isEmpty()) {
			schoolType = false;
		}
		data.put("userCustomerCode", voteUserInfo.getCustomerCode());
		data.put("userVote", userVote);
		data.put("schoolType", schoolType);
		// 自己学校没有参数
		List<VoteSchool> schoolAll = voteSchoolManager
				.findByCondition(Conditions.desc("poll"));
		JSONArray JA = new JSONArray();
		for (VoteSchool vs : schoolAll) {
			JSONObject JO = new JSONObject();
			String customerCode1 = vs.getCustomerCode();
			String customerName = vs.getCustomerName();
			long poll = vs.getPoll();
			JO.put("customerCode", customerCode1);
			JO.put("customerName", customerName.trim());
			JO.put("poll", poll);
			JO.put("sunMoney", poll * 0.5);
			int countClass = voteClassManager.countByCondition(Conditions.eq(
					"customerCode", vs.getCustomerCode()));
			JO.put("countClass", countClass);
			if (userVote) {
				String customerCode2 = voteClassManager.get(
						voteUserInfo.getClassId()).getCustomerCode();
				if (customerCode2.equals(customerCode1)) {
					JO.put("voteSchool", true);
				} else {
					JO.put("voteSchool", false);
				}

			} else {
				JO.put("voteSchool", false);
			}
			JA.add(JO);
		}
		data.put("schoolList", JA);
		result.put("result_", true);
		result.put("code_", 0);
		result.put("data", data);
		result.put("message_", "成功");
		ajaxOutPutText(result.toJSONString());
		return;
	}

	// 投票
	public void vote() throws Exception {
		JSONObject result = new JSONObject();
		JSONObject data = new JSONObject();
		String uuid = this.getParameter("key");
		Long classId = this.getLongParameter("classId");
		if (StringUtils.isBlank(uuid) || null == classId) {
			result.put("result_", false);
			result.put("code_", 99);
			result.put("message_", "入口参数错误！");
			ajaxOutPutText(result.toJSONString());
			return;
		}

		JSONObject vote = voteUserInfoManager.vote(uuid, classId);
		if (vote.getBooleanValue("result_")) {
			VoteClass voteClass = voteClassManager.get(classId);
			long poll = voteClass.getPoll();
			String className = voteClass.getClassName();
			JSONObject data1 = new JSONObject();
			List<VoteClass> voteClassList = voteClassManager.findByCondition(
					Conditions.eq("customerCode", voteClass.getCustomerCode()),
					Conditions.desc("poll"));
			if (voteClassList.size() > 5) {
				VoteClass voteClass4 = voteClassList.get(4);
				long poll5 = voteClass4.getPoll();// 第五名的票数

				long myClassPoll = poll;
				long differ5 = poll5 - myClassPoll;
				if (differ5 > 0) {
					data1.put("myClassMessage", "距离获得奖金还有" + differ5 + "票");
				} else {
					data1.put("myClassMessage", "已进入前5名，继续保持哦");
				}
			} else {
				data1.put("myClassMessage", "已进入前5名，继续保持哦");
			}

			data1.put("sumMoney", poll * 0.5);
			data1.put("className", className);
			vote.put("data", data1);
		}
		ajaxOutPutText(vote.toJSONString());
		return;

	}

	public void getClassByCostomCode() throws IOException {

		JSONObject result = new JSONObject();
		JSONObject data = new JSONObject();
		String uuid = this.getParameter("key");
		List<VoteUserInfo> voteUserInfoList = voteUserInfoManager
				.findByCondition(Conditions.eq("uuid", uuid));
		if (voteUserInfoList.isEmpty()) {
			result.put("result_", false);
			result.put("code_", 99);
			result.put("message_", "没有找到该用户的信息！");
			ajaxOutPutText(result.toJSONString());
			return;
		}
		VoteUserInfo voteUserInfo = voteUserInfoList.get(0);
		boolean userVote = voteUserInfo.isType();
		boolean schoolType = true;
		String customerCode = this.getParameter("customerCode");
		List<VoteClass> voteClassList = voteClassManager.findByCondition(
				Conditions.eq("customerCode", customerCode),
				Conditions.desc("poll"));

		if (voteClassList.isEmpty()) {
			schoolType = false;
		}
		data.put("userVote", userVote);
		data.put("schoolType", schoolType);
		if (schoolType) {
			data.put("customerName", voteClassList.get(0).getCustomerName());
			JSONArray classList = new JSONArray();
			long sum = 0L;
			long yesterdaySum = 0L;
			for (VoteClass vc : voteClassList) {
				JSONObject jo = new JSONObject();
				jo.put("classId", vc.getId());
				jo.put("className", vc.getClassName().trim());
				jo.put("poll", vc.getPoll());
				sum = sum + vc.getPoll();
				classList.add(jo);
			}
			data.put("toDayMoney", sum * 0.5);
			data.put("yesterdayAdd", 0);
			data.put("classList", classList);
			if (userVote) {
				VoteClass myClass = voteClassManager.get(voteUserInfo
						.getClassId());
				if (voteClassList.size() > 5) {
					VoteClass voteClass = voteClassList.get(4);
					long poll5 = voteClass.getPoll();// 第五名的票数

					long myClassPoll = myClass.getPoll();
					long differ5 = poll5 - myClassPoll;
					if (differ5 > 0) {
						data.put("myClassMessage", "距离获得奖金还有" + differ5 + "票");
					} else {
						data.put("myClassMessage", "已进入前5名，继续保持哦");
					}
				} else {
					data.put("myClassMessage", "已进入前5名，继续保持哦");
				}
				data.put("myClassId", voteUserInfo.getClassId());
				data.put("myClassName", myClass.getClassName());
				data.put("myClassPoll", myClass.getPoll());
				data.put("myCustomerCode", myClass.getCustomerCode());
			}

		} else { // 自己学校没有参数
			List<VoteSchool> schoolAll = voteSchoolManager
					.findByCondition(Conditions.desc("poll"));
			JSONArray JA = new JSONArray();
			for (VoteSchool vs : schoolAll) {
				JSONObject JO = new JSONObject();
				String customerCode1 = vs.getCustomerCode();
				String customerName = vs.getCustomerName();
				long poll = vs.getPoll();
				JO.put("customerCode", customerCode1);
				JO.put("customerName", customerName.trim());
				JO.put("poll", poll);
				JO.put("sunMoney", poll * 0.5);
				int countClass = voteClassManager.countByCondition(Conditions
						.eq("customerCode", vs.getCustomerCode()));
				JO.put("countClass", countClass);
				if (userVote && customerCode1.equals(customerCode)) {
					JO.put("voteSchool", true);
				} else {
					JO.put("voteSchool", false);
				}
				JA.add(JO);
			}
			data.put("schoolList", JA);

		}

		result.put("result_", true);
		result.put("code_", 0);
		result.put("data", data);
		result.put("message_", "成功");
		ajaxOutPutText(result.toJSONString());
		return;

	}

	// 根据costomCode获取班级列表
	public void getClassByCostomCode2() throws IOException {
		JSONObject result = new JSONObject();
		JSONObject data = new JSONObject();
		String customerCode = this.getParameter("customerCode");
		List<VoteClass> voteClassList = voteClassManager.findByCondition(
				Conditions.eq("customerCode", customerCode),
				Conditions.desc("poll"));
		JSONArray classList = new JSONArray();
		long sum = 0L;
		long yesterdaySum = 0L;
		for (VoteClass vc : voteClassList) {
			JSONObject jo = new JSONObject();
			jo.put("classId", vc.getId());
			jo.put("className", vc.getClassName().trim());
			jo.put("poll", vc.getPoll());
			sum = sum + vc.getPoll();
			classList.add(jo);
		}
		data.put("toDayMoney", sum * 0.5);
		data.put("yesterdayAdd", 0);
		data.put("classList", classList);
		data.put("customerName", voteClassList.get(0).getCustomerName().trim());

		result.put("result_", true);
		result.put("code_", 0);
		result.put("data", data);
		result.put("message_", "成功");
		ajaxOutPutText(result.toJSONString());
		return;

	}

	// 分享
	public void getVoteShareURL() throws Exception {
		JSONObject result = new JSONObject();
		JSONObject data = new JSONObject();
		String uuid = this.getParameter("key");
		List<VoteUserInfo> voteUserInfoList = voteUserInfoManager
				.findByCondition(Conditions.eq("uuid", uuid));
		if (voteUserInfoList.isEmpty()) {
			String s = preferenceUtils.getVoteShareURL() + "?key=" + uuid;
			result.put("result_", true);
			result.put("code_", 0);
			data.put("shareUrl", s);
			result.put("data", data);
			result.put("message_", "成功");
			ajaxOutPutText(result.toJSONString());
			return;
		}
		String shareUuid = "";
		VoteUserInfo voteUserInfo = voteUserInfoList.get(0);
		shareUuid = voteUserInfo.getShareUuid();
		if (StringUtils.isBlank(shareUuid)) {
			String uuid1 = UUID.randomUUID().toString().trim()
					.replaceAll("-", "");// uuid
			voteUserInfo.setShareUuid(uuid1);
			voteUserInfoManager.update(voteUserInfo);
			shareUuid = uuid1;
		}

		String s = preferenceUtils.getVoteShareURL() + "?key=" + shareUuid;
		result.put("result_", true);
		result.put("code_", 0);
		data.put("shareUrl", s);
		result.put("data", data);
		result.put("message_", "成功");
		ajaxOutPutText(result.toJSONString());
		return;

	}

	// 微信分享
	public void getUseJsapi() throws IOException {
		String shareURL = this.getParameter("shareURL");
		JSONObject useJsapi = httpCampusUtils.getUseJsapi(shareURL);
		ajaxOutPutText(useJsapi.toJSONString());
		return;
	}

	// #################################后台
	@Override
	protected Serializable getObjectId(VoteClass data) {
		return data.getId();
	}

	public VoteClass getData() {
		return data;
	}

	public void setData(VoteClass data) {
		this.data = data;
	}

	protected JSONObject dataToJSONObject(VoteClass data) {
		JSONObject jsonObj = (JSONObject) JSONObject.toJSON(data);

		jsonObj.put("className", data.getClassName());
		return jsonObj;

	}

	protected Collection<Condition> createConditions() throws Exception {
		java.util.Collection<Condition> conditions = new java.util.ArrayList<Condition>();
		conditions.add(Conditions.desc("id"));
		return conditions;
	}

	public String importAllClass() {
		return SUCCESS;
	}

	public void importAll() throws Exception {
		// 生成一个随机文件名的临时文件
		String path = ServletActionContext.getServletContext().getRealPath("/");
		Long time = Calendar.getInstance().getTimeInMillis();
		File errorFile = new File(path + "/" + String.valueOf(time) + ".xls");
		ActionContext.getContext().getSession()
				.put("errorFile", errorFile.getName());
		voteClassManager.inputAllClass(file, fileFileName, errorFile);
		ajaxOutPutText(SUCCESS);
	}
}
